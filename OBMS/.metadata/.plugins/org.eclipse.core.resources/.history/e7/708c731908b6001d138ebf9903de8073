package com.userfront.Service.UserServiceImpl;

import java.util.Set;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.userfront.Dao.RoleDao;
import com.userfront.Dao.UserDao;
import com.userfront.Domain.User;
import com.userfront.Domain.Security.UserRole;
import com.userfront.Service.AccountService;
import com.userfront.Service.UserService;

@Service
@org.springframework.transaction.annotation.Transactional
public class UserServiceImpl implements UserService {

	private static final Logger LOG = LoggerFactory.getLogger(UserService.class);

	@Autowired
	private UserDao userDao;

	@Autowired
	private RoleDao roleDao;
	
	@Autowired
	private BCryptPasswordEncoder passwordEncoder;
	
	@Autowired
	private AccountService accountService;
	
	
	public void save(User user) {
		userDao.save(user);
	}

	public User findByUserName(String username) {
		return userDao.findByuserName(username);
	}

	public User findByEmail(String email) {
		return userDao.findByEmail(email);
	}

	public boolean checkUserExists(String username, String email) {
		if (checkUserNameExists(username) || checkEmailExists(username)) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkUserNameExists(String username) {
		if (null != findByUserName(username)) {
			return true;
		}

		return false;
	}

	public boolean checkEmailExists(String email) {
		if (null != findByEmail(email)) {
			return true;
		}

		return false;
	}
	
	@org.springframework.transaction.annotation.Transactional
	public User createUser(User user, Set<UserRole> userRoles) {
        User localUser = userDao.findByuserName(user.getUsername());

        if (localUser != null) {
            LOG.info("User with username {} already exist. Nothing will be done. ", user.getUsername());
        } else {
            String encryptedPassword = passwordEncoder.encode(user.getPassword());
            user.setPassword(encryptedPassword);

            for (UserRole ur : userRoles) {
                roleDao.save(ur.getRole());
            }

            user.getUserRoles().addAll(userRoles);

            user.setCurrentAccount(accountService.createCurrentAccount());
            user.setSavingAccount(accountService.createSavingAccount());

            localUser = userDao.save(user);
        }
        
        return localUser;
	}
}
