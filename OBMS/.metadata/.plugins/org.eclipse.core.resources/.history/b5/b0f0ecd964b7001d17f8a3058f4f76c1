package com.userfront.Service.UserServiceImpl;

import java.math.BigDecimal;
import java.security.Principal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.userfront.Dao.CurrentAccountDao;
import com.userfront.Dao.SavingAccountDao;
import com.userfront.Domain.CurrentAccount;
import com.userfront.Domain.SavingAccount;
import com.userfront.Domain.User;
import com.userfront.Service.AccountService;
import com.userfront.Service.UserService;

@Service
public class AccountServiceImpl implements AccountService {

	private static int nextAccountNumber = 11223145;
	
	@Autowired
	private CurrentAccountDao currentAccountDao;

	@Autowired
	private SavingAccountDao savingAccountDao;

	@Autowired
    private UserService userService;
	
	@Override
	public SavingAccount createSavingAccount() {
		SavingAccount savingAccount = new SavingAccount();
		savingAccount.setAccountBalance(new BigDecimal(0.0));
		savingAccount.setAccountNumber(accountGen());

		savingAccountDao.save(savingAccount);

		return savingAccountDao.findByAccountNumber(savingAccount.getAccountNumber());
	}

	@Override
	public CurrentAccount createCurrentAccount() {
		// TODO Auto-generated method stub
		CurrentAccount currentAccount = new CurrentAccount();
		currentAccount.setAccountBalance(new BigDecimal(0.0));
		currentAccount.setAccountNumber(accountGen());

		currentAccountDao.save(currentAccount);

		return currentAccountDao.findByAccountNumber(currentAccount.getAccountNumber());
	}
	
	public void deposit(String accountType, double amount, Principal principal) {
        User user = userService.findByUserName(principal.getName());

        if (accountType.equalsIgnoreCase("Current")) {
            CurrentAccount currentAccount = user.getCurrentAccount()
            primaryAccount.setAccountBalance(primaryAccount.getAccountBalance().add(new BigDecimal(amount)));
            primaryAccountDao.save(primaryAccount);

            Date date = new Date();

            PrimaryTransaction primaryTransaction = new PrimaryTransaction(date, "Deposit to Primary Account", "Account", "Finished", amount, primaryAccount.getAccountBalance(), primaryAccount);
            transactionService.savePrimaryDepositTransaction(primaryTransaction);
            
        } else if (accountType.equalsIgnoreCase("Savings")) {
            SavingsAccount savingsAccount = user.getSavingsAccount();
            savingsAccount.setAccountBalance(savingsAccount.getAccountBalance().add(new BigDecimal(amount)));
            savingsAccountDao.save(savingsAccount);

            Date date = new Date();
            SavingsTransaction savingsTransaction = new SavingsTransaction(date, "Deposit to savings Account", "Account", "Finished", amount, savingsAccount.getAccountBalance(), savingsAccount);
            transactionService.saveSavingsDepositTransaction(savingsTransaction);
        }
    }
	

	private int accountGen() {
        return ++nextAccountNumber;
    }
}
