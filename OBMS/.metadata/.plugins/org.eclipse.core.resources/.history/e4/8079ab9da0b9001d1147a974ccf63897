package com.userfront.Service.UserServiceImpl;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.userfront.Dao.CurrentAccountDao;
import com.userfront.Dao.CurrentTranscationDao;
import com.userfront.Dao.SavingAccountDao;
import com.userfront.Dao.SavingTranscationDao;
import com.userfront.Domain.CurrentAccount;
import com.userfront.Domain.CurrentTranscation;
import com.userfront.Domain.SavingAccount;
import com.userfront.Domain.SavingTranscation;
import com.userfront.Domain.User;
import com.userfront.Service.TranscationService;
import com.userfront.Service.UserService;

@Service
public class TranscationServiceImpl implements TranscationService {

	@Autowired
	private UserService userService;


	@Autowired
	private CurrentAccountDao currentAccountDao;
	
	@Autowired
	private SavingAccountDao savingAccountDao;
	
	
	@Autowired
	private CurrentTranscationDao currentTranscationDao;

	@Autowired
	private SavingTranscationDao savingTranscationDao;


	public List<CurrentTranscation> findCurrentTranscationList(String username) {
		// TODO Auto-generated method stub
		User user = userService.findByUserName(username);
		List<CurrentTranscation> currentTranscationList = user.getCurrentAccount().getCurrentTranscationList();
		return currentTranscationList;
	}

	
	public List<SavingTranscation> findSavingTranscationList(String username) {
		// TODO Auto-generated method stub
		User user = userService.findByUserName(username);
		List<SavingTranscation> savingTranscationList = user.getSavingAccount().getSavingTranscationList();

		return savingTranscationList;
	}


	public void saveCurrentDepositTranscation(CurrentTranscation currentTranscation) {
		// TODO Auto-generated method stub

		currentTranscationDao.save(currentTranscation);
	}


	public void saveSavingDepositTranscation(SavingTranscation savingTranscation) {
		// TODO Auto-generated method stub

		savingTranscationDao.save(savingTranscation);

	}

	
	public void saveCurrentWithdrawTranscation(CurrentTranscation currentTranscation) {
		// TODO Auto-generated method stub
		currentTranscationDao.save(currentTranscation);
	}


	public void saveSavingWithdrawTranscation(SavingTranscation savingTranscation) {
		// TODO Auto-generated method stub
		savingTranscationDao.save(savingTranscation);

	}


	@Override
	public void betweenAccountsTransfer(String transferFrom, String transferTo, String amount,
			CurrentAccount currentAccount, SavingAccount savingAccount) throws Exception {
		// TODO Auto-generated method stub
		
		if (transferFrom.equalsIgnoreCase("Current") && transferTo.equalsIgnoreCase("Saving")) {
			currentAccount.setAccountBalance(currentAccount.getAccountBalance().subtract(new BigDecimal(amount)));
			savingAccount.setAccountBalance(savingAccount.getAccountBalance().add(new BigDecimal(amount)));
			currentAccountDao.save(currentAccount);
			savingAccountDao.save(savingAccount);

            Date date = new Date();

            CurrentTranscation currentTranscation = new CurrentTranscation(date, "Between account transfer from "+transferFrom+" to "+transferTo, "Account", "Finished", Double.parseDouble(amount), currentAccount.getAccountBalance(), currentAccount);
            primaryTransactionDao.save(primaryTransaction);
        } else if (transferFrom.equalsIgnoreCase("Savings") && transferTo.equalsIgnoreCase("Primary")) {
            primaryAccount.setAccountBalance(primaryAccount.getAccountBalance().add(new BigDecimal(amount)));
            savingsAccount.setAccountBalance(savingsAccount.getAccountBalance().subtract(new BigDecimal(amount)));
            primaryAccountDao.save(primaryAccount);
            savingsAccountDao.save(savingsAccount);

            Date date = new Date();

            SavingsTransaction savingsTransaction = new SavingsTransaction(date, "Between account transfer from "+transferFrom+" to "+transferTo, "Transfer", "Finished", Double.parseDouble(amount), savingsAccount.getAccountBalance(), savingsAccount);
            savingsTransactionDao.save(savingsTransaction);
        } else {
            throw new Exception("Invalid Transfer");
        }
		
	}

}
