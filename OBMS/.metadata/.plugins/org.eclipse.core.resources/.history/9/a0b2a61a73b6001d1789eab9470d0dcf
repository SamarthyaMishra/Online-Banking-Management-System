package com.userfront.Controller;

import java.util.HashSet;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.userfront.Dao.RoleDao;
import com.userfront.Domain.User;
import com.userfront.Domain.Security.UserRole;
import com.userfront.Service.UserService;

@Controller
public class HomeController {

	@Autowired
	private UserService userService;
	
	@Autowired
	private RoleDao roleDao;
	
	@Autowired
	private BCryptPasswordEncoder passwordEncoder;
	
	
	@RequestMapping("/")
	public String home() {
		return "redirect:/index";
	}

	@RequestMapping("/index")
	public String index() {
		return "index";
	}

	@RequestMapping(value = "/signup", method = RequestMethod.GET)
	public String signup(Model model) {
		User user = new User();
		model.addAttribute("user", user);
		return "signup";

	}

	// Checking for the email and user name if exists in database //
	
	@RequestMapping(value = "/signup", method = RequestMethod.POST)
	public String signupPost(@ModelAttribute("user") User  user,  Model model) {
		
		if(userService.checkUserExists(user.getUsername(), user.getEmail()))  {

			if (userService.checkEmailExists(user.getEmail())) {
				model.addAttribute("emailExists", true);
			}

			if (userService.checkUserNameExists(user.getUsername())) {
				model.addAttribute("usernameExists", true);
			}

			return "signup";
		} 
			else {
	        	 Set<UserRole> userRoles = new HashSet<>();
	             userRoles.add(new UserRole(user, roleDao.findByName("ROLE_USER")));

	            userService.createUser(user, userRoles);

	            return "redirect:/";
			}
	}
}